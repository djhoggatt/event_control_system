"""
Author: Denver Hoggatt
Description: Constructs a list of sub-readmes, and appends this list to the top-level readme file.

Copyright (c) 2025 Denver Hoggatt. All rights reserved.

This software is licensed under the terms stated in the LICENSE file
located at the root of this repository. If no LICENSE file accompanies
this software, it is provided "AS IS" WITHOUT WARRANTY OF ANY KIND.
"""

# --------------------------------------------------------------------------------------------------
#  Imports
# --------------------------------------------------------------------------------------------------

from os import path
from os import sep
from os import pardir
from os import walk
from os import getcwd

# --------------------------------------------------------------------------------------------------
# Global Constants
# --------------------------------------------------------------------------------------------------


# --------------------------------------------------------------------------------------------------
# Global Variables
# --------------------------------------------------------------------------------------------------


# --------------------------------------------------------------------------------------------------
# Classes
# --------------------------------------------------------------------------------------------------


# --------------------------------------------------------------------------------------------------
# Functions
# --------------------------------------------------------------------------------------------------


def find_markdown_links():
    """
    @brief Finds all markdown files in the directory/sub-directories, excluding certain directories.
    """

    links = []

    for root, dirs, files in walk(getcwd()):
        if "build" in dirs:
            dirs.remove("build")  # Exclude 'build' directories

        if "subprojects" in dirs:
            dirs.remove("subprojects")

        if ".github" in dirs:
            dirs.remove(".github")

        for file in files:
            if not file.endswith(".md"):
                continue

            if file.startswith("./build"):
                continue

            if file.startswith("./.github"):
                continue

            link = process_markdown_file(root, file)
            if link:
                links.append(link)

    return links


def process_markdown_file(root, file):
    """
    @brief The top line of the markdown should contain the title of the file.
    This function retrieves that title for linking.
    """

    file_path = path.join(root, file)
    with open(file_path, "r") as f:
        first_line = f.readline().strip()

    # Check and format the first line
    if (not first_line.startswith("# ")) or (len(first_line) <= 2):
        return None

    processed_line = first_line[2:]  # Exclude "# " in markdown title for link title

    relative_path = path.relpath(file_path, pardir).replace(
        sep, "/"
    )  # Linux-style seperators
    # needed for github.

    relative_path = "/".join(
        relative_path.split("/")[1:]
    )  # Relative path includes current dir,
    # which we don't want in the link.

    return f"**[{processed_line}]({relative_path})**<br>"


def find_autogen_comment_index(lines):
    """
    @brief finds the index of the string after which the links will be appended.
    """

    for index, line in enumerate(lines):
        if "<!-- AUTOGENERATED - DO NOT MAKE MODIFICATIONS BELOW THIS LINE -->" in line:
            return index

    return None


def write_updated_readme(lines, links, index, readme_path):
    """ "
    @brief Appends the given links to the given readme, at the given index.
    """

    new_lines = lines[: index + 1]  # Up to and including the autogen line
    new_lines.append("\n\n## Links\n")
    new_lines.extend(link + "\n" for link in links)

    with open(readme_path, "w") as f:
        f.writelines(new_lines)


def update_readme(links):
    """
    @brief Links the sub-level markdown documents to the end of the top-level
    readme file.
    """

    readme_path = "README.md"
    if not path.exists(readme_path):
        print("README.md not found in the parent directory.")
        return

    with open(readme_path, "r") as f:
        lines = f.readlines()

    index = find_autogen_comment_index(lines)
    if index is None:
        print("Autogen comment not found in README.md.")
        return

    write_updated_readme(lines, links, index, readme_path)


# --------------------------------------------------------------------------------------------------
# Script
# --------------------------------------------------------------------------------------------------

if __name__ == "__main__":
    links = find_markdown_links()

    if links:
        update_readme(links)
    else:
        print("No markdown files found.")

# End of File
